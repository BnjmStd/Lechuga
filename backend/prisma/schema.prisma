generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement()) // Identificador único del usuario, con incremento automático
  email    String   @unique @db.VarChar(100) // Correo electrónico único, con un límite de 100 caracteres en la base de datos
  createAt DateTime @default(now()) // Fecha de creación del usuario, con valor predeterminado de la fecha actual
  updated  DateTime @updatedAt // Fecha de la última actualización del registro, actualizada automáticamente

  password  String // Contraseña del usuario
  avatarImg String? // Imagen de perfil o avatar del usuario, opcional

  userType UserType // Enum que define el tipo de usuario (puede ser admin, doctor, paciente, etc.)
  paciente Patient? // Relación opcional con el modelo Patient (si el usuario es un paciente)
  doctor   Doctor? // Relación opcional con el modelo Doctor (si el usuario es un doctor)
  admin    Admin? // Relación opcional con el modelo Admin (si el usuario es un administrador)

  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade) // Relación opcional con el modelo Contact; si se elimina el usuario, también se eliminará el contacto
  contactId Int?     @unique // Identificador único para el contacto relacionado, opcional
}

model Contact {
  id        Int     @id @default(autoincrement()) // Identificador único
  rut       String? @unique // RUT único para contacto (si aplica)
  firstName String // Primer nombre
  lastName  String? // Apellido opcional
  telephone String? // Teléfono opcional
  address   String? // Dirección opcional
  age       Int? // Edad opcional

  user User? @relation

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de última actualización
}

model Patient {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int              @unique
  updated        DateTime         @updatedAt
  medicalHistory MedicalHistory[] // Relación con la tabla Historial
  exams          Exam[] // Relación uno a muchos con Exam
  prestaciones   ServiceEntity[]

  // New attributes:
  gender                Gender? // Género del paciente (puede ser opcional)
  currentWeight         Float? // Peso actual de la paciente en kilogramos.
  currentHeight         Float? // Altura actual de la paciente en metros¿.
  weightHeightHistory   HealthMetricsHistory[] // Relación de uno a muchos para el historial de peso y altura
  medicalRecommendation MedicalRecommendation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalRecommendation {
  // implementar lo de daniel de la tabla de recomendaciones medicas

  id          Int      @id @default(autoincrement())
  description String   @db.Text
  name        String   @db.VarChar(100)
  date        DateTime @default(now())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model HealthMetricsHistory {
  id        Int     @id @default(autoincrement())
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int
  weight    Float // Peso del paciente 
  height    Float // altura paciente

  recordDate DateTime // Fecha del registro de peso y altura

  imc    Float // Índice de masa corporal
  fat    Float // Porcentaje de grasa corporal
  muscle Float // Porcentaje de músculo
  water  Float // Porcentaje de agua

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model MedicalHistory {
  id          Int      @id @default(autoincrement()) // Identificador único
  description String   @db.Text // Descripción del historial médico
  date        DateTime @default(now()) // Fecha de la entrada en el historial
  patientId   Int // ID del paciente relacionado
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade) // Relación con el paciente, con eliminación en cascada

  updatedAt DateTime @updatedAt // Fecha de la última actualización
  createdAt DateTime @default(now())

  medicines          MedicalHistoryMedicine[]
  medicalIndications Indication[]
}

model MedicalHistoryMedicine {
  medicineId Int
  historyId  Int

  medicine Medicine       @relation(fields: [medicineId], references: [id])
  history  MedicalHistory @relation(fields: [historyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([medicineId, historyId])
}

model Indication {
  id        Int      @id @default(autoincrement())
  historyId Int      @unique
  texto     String
  fecha     DateTime @default(now())
  updated   DateTime @updatedAt

  //medicines Medicine[]       // ID del historial médico al que pertenece la indicación
  history MedicalHistory @relation(fields: [historyId], references: [id], onDelete: Cascade) // Relación con el historial médico (uno a muchos)
}

model Medicine {
  id                Int     @id @default(autoincrement())
  name              String
  dosage            String // Dosis del medicamento
  type              String // Tipo de medicamento (e.g., Analgésico, Antibiótico)
  description       String? // Descripción del medicamento
  sideEffects       String? // Efectos secundarios
  contraindications String? // Contraindicaciones

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  medicalHistories MedicalHistoryMedicine[]
  categorys        MedicineCategory[]
}

model Category {
  id           Int     @id @default(autoincrement()) // Identificador único
  name         String // Nombre de la categoría
  description  String? // Descripción de la categoría (opcional)
  categoryType String // Tipo de categoría (e.g., Medicamento, Suplemento)
  code         String? // Código de la categoría (opcional)

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de la última actualización

  medicines MedicineCategory[] // Relación muchos a muchos con Medicamentos
}

model MedicineCategory {
  medicineId Int
  categoryId Int

  medicine Medicine @relation(fields: [medicineId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([medicineId, categoryId])
}

model Exam {
  id          Int             @id @default(autoincrement())
  name        String
  orderNumber Int
  content     String          @db.Text // contenido binario
  format      FormatExam
  patientId   Int
  patient     Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  benefit     ServiceEntity[] // prestación médica 
  result      ExamResult[]

  // Relación con el laboratorio:
  laboratoryId Int? // ID del laboratorio
  laboratory   Laboratory? @relation(fields: [laboratoryId], references: [id])

  // Nuevos campos para fechas y otros detalles
  sampleDate    DateTime? // fecha de toma de muestra
  receptionDate DateTime? // fecha de recepción
  printDate     DateTime? // fecha de impresión (opcional)

  createdAt DateTime @default(now()) // fecha de creación
  updatedAt DateTime @updatedAt

  requestingDoctorId    Int? // médico solicitante (si aplica)
  requestingDoctor      Doctor? @relation(fields: [requestingDoctorId], references: [id]) // Relación opcional con la tabla Doctor
  sampleType            String? // tipo de muestra
  examMethod            String? // método de examen (opcional)
  equipment             String? // equipo utilizado (opcional)
  responsibleTechnician String? // técnico responsable (opcional, podría estar relacionado con el laboratorio)
}

// tabla laboratorio
model Laboratory {
  id          Int    @id @default(autoincrement())
  name        String // nombre del laboratorio
  address     String // dirección del laboratorio
  contactInfo String // información de contacto del laboratorio

  exams Exam[] // Relación uno a muchos con Exam

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Analyte {
  id          Int          @id @default(autoincrement())
  parameter   String // Nombre del analito, e.g., Glucosa, Colesterol
  units       String // Unidades de medida, e.g., mg/dL, mmol/L
  normalRange String? // Rango normal de valores para referencia
  results     ExamResult[] // Relación con ResultadoExamen
  value       String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model ExamResult {
  id    Int   @id @default(autoincrement())
  valor Float // Valor del analito medido

  examen   Exam @relation(fields: [examenId], references: [id], onDelete: Cascade)
  examenId Int

  analito   Analyte @relation(fields: [analitoId], references: [id])
  analitoId Int

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Medico: Representa a los médicos, con su especialidad y relación con un usuario.
model Doctor {
  id           Int             @id @default(autoincrement())
  especialidad String          @db.VarChar(100)
  usuarioId    Int             @unique
  usuario      User            @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  prestaciones ServiceEntity[]
  updated      DateTime        @updatedAt

  exam Exam[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// MedicalService: Define the medical services (prestations) that can be offered.
model MedicalService {
  id          Int      @id @default(autoincrement())
  name        String // Nombre del servicio médico
  description String? // Descripción del servicio
  coverage    Float? // Cobertura del servicio
  cost        Float? // Costo del servicio
  updatedAt   DateTime @updatedAt // Fecha de actualización

  serviceTypeId Int // ID del tipo de servicio
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade) // Relación con el tipo de servicio

  entities ServiceEntity[] // Relación con la tabla intermedia de entidades

  createdAt DateTime @default(now()) // Fecha de creación
}

// ServiceType: Clasifica los servicios médicos en diferentes tipos (por ejemplo, consultas, cirugías).
model ServiceType {
  id          Int              @id @default(autoincrement())
  name        String // Nombre del tipo de servicio
  description String? // Descripción del tipo de servicio
  services    MedicalService[] // Relación con los servicios

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de actualización
}

// Institución: Representa las instituciones (públicas o privadas) que ofrecen los servicios médicos.
model HealthInstitution {
  id              Int             @id @default(autoincrement())
  name            String // Nombre de la institución
  address         String? // Dirección de la institución
  telephone       String? // Teléfono de la institución
  institutionType InstitutionType // Tipo de institución (pública, privada, etc.)
  services        ServiceEntity[] // Relación con la tabla intermedia de servicios

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de actualización
}

// ServiceEntity: Tabla intermedia que conecta médicos, servicios e instituciones para gestionar relaciones de muchos a muchos entre ellos.
model ServiceEntity {
  institutionId Int
  serviceId     Int
  doctorId      Int?
  examId        Int?
  patientId     Int?
  updatedAt     DateTime @updatedAt // Fecha de actualización

  institution HealthInstitution @relation(fields: [institutionId], references: [id], onDelete: Cascade) // Relación con la institución
  service     MedicalService    @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Relación con el servicio
  doctor      Doctor?           @relation(fields: [doctorId], references: [id]) // Relación con el médico (opcional)
  exam        Exam?             @relation(fields: [examId], references: [id]) // Relación con el examen (opcional)
  patient     Patient?          @relation(fields: [patientId], references: [id]) // Relación con el paciente (opcional)

  @@id([institutionId, serviceId]) // Clave primaria compuesta
}

model Admin {
  id         Int      @id @default(autoincrement())
  department String   @db.VarChar(100) // Departamento del administrador
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relación con el usuario
  userId     Int      @unique // ID único del usuario
  updatedAt  DateTime @updatedAt // Fecha de actualización
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserType {
  PACIENTE
  MEDICO
  ADMINISTRADOR
}

enum FormatExam {
  IMAGEN
  PDF
}

enum InstitutionType {
  PUBLICO
  PRIVADO
}

// npx prisma migrate dev --name nombre_de_la_migracion
